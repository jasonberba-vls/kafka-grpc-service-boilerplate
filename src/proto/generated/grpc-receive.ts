// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.27.1
// source: grpc-receive.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "grpc_receive";

export interface TestMethodRequest {
  numberInput: number;
  stringInput: string;
  boolInput: boolean;
  optionalParam?: string | undefined;
}

export interface TestMethodResponse {
  numberResponse: number;
  stringResponse: string;
  boolResponse: boolean;
  optionalResponse?: string | undefined;
}

export const GRPC_RECEIVE_PACKAGE_NAME = "grpc_receive";

export interface GRPCReceiveServiceClient {
  testMethod(request: TestMethodRequest): Observable<TestMethodResponse>;

  testMethodWithKafka(request: TestMethodRequest): Observable<TestMethodResponse>;
}

export interface GRPCReceiveServiceController {
  testMethod(
    request: TestMethodRequest,
  ): Promise<TestMethodResponse> | Observable<TestMethodResponse> | TestMethodResponse;

  testMethodWithKafka(
    request: TestMethodRequest,
  ): Promise<TestMethodResponse> | Observable<TestMethodResponse> | TestMethodResponse;
}

export function GRPCReceiveServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["testMethod", "testMethodWithKafka"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("GRPCReceiveService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("GRPCReceiveService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const GRPC_RECEIVE_SERVICE_NAME = "GRPCReceiveService";
